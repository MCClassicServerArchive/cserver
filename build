#!/bin/bash
if [ "$CC" = "" ]; then
	CC="gcc"
fi

NPROC="nproc"
SHLIB_EXT="so"
case "$(uname -s)" in
	Linux)
		HOST_OS="linux"
		;;
	Darwin)
		HOST_OS="darwin"
		NPROC="sysctl -n hw.physicalcpu"
		;;
	CYGWIN*|MINGW*|MSYS*|MINGW32*)
		HOST_OS="win"
		;;
	*)
		HOST_OS="unknown"
		;;
esac

if [[ "$HOST_OS" != "win" && "$CC" == *"mingw"* ]]; then
	TARGET_OS="win"
else
	TARGET_OS="$HOST_OS"
fi

MAXWORKERS=$($NPROC)
COMPILE=1
GITOK=0
GITUPD=0
RUN=0
SAN=0
DEBUG=0
OPT="-O2"
WARN=""
ROOT=$(cd "$(dirname "$0")"; pwd)
MACH=$($CC -dumpmachine)
if [ $MACH = "" ]; then
	MACH="unknown"
fi
CC="$CC -fdiagnostics-color=always"
if [ "$LNK" = "" ]; then
	LNK="$CC"
fi
if [ "$TARGET_OS" != "win" ]; then
	LNK="$LNK -rdynamic"
	if [ "$TARGET_OS" != "darwin" ]; then
		CFLAGS="$CFLAGS -fno-semantic-interposition"
	else
		LNK="$LNK -undefined dynamic_lookup"
		SHLIB_EXT="dylib"
	fi
else
	SHLIB_EXT="dll"
fi
CFLAGS="-pipe -fpic"
LIBS=""
OUTBIN="server"
if git --version >/dev/null 2>&1; then
	GITOK=1
fi
PLUGIN_ARGS=""
PLUGIN_BUILD=0
PLUGIN_INSTALL=0
SERVER_OUTROOT="$ROOT/out/$MACH"
PLUGINS_DIR="$SERVER_OUTROOT/plugins"

notaplugin () {
	echo "Looks like the specified directory is not a plugin."
	exit 1
}

waitfor () {
	if ! wait $1; then
		echo -ne "error\nCompiler errors:\n$(cat $STDERR)\n"
		exit 1
	fi
}

for a in "$@"
do
	if [ $PLUGIN_BUILD -eq 1 ]; then
		if [ -n "$PLUGIN_NAME" ]; then
			if [ "$a" == "install" ]; then
				PLUGIN_INSTALL=1
			else
				PLUGIN_ARGS="$PLUGIN_ARGS$a "
			fi
			continue
		else
			if [ ! -d "../cs-$a" ]; then notaplugin; fi
			if [ ! -d "../cs-$a/src" ]; then notaplugin; fi
			PLUGIN_NAME="$a"
			CFLAGS="$CFLAGS -DCORE_BUILD_PLUGIN -Isrc"
			LNK="$LNK -shared"
			OUTBIN="$a.$SHLIB_EXT"
			ROOT="../cs-$a"
		fi
	fi

	if [ "$a" == "cls" ]; then clear; fi
	if [ "$a" == "pb" ]; then PLUGIN_BUILD=1; fi
	if [ "$a" == "wall" ]; then WARN="-Wall -Wextra"; fi
	if [ "$a" == "wx" ]; then CFLAGS="$CFLAGS -Werror"; fi
	if [ "$a" == "w0" ]; then WARN="-W0"; fi
	if [ "$a" == "dbg" ]; then DEBUG=1; fi
	if [ "$a" == "od" ]; then OPT="-O0"; fi
	if [ "$a" == "san" ]; then SAN=1; fi
	if [ "$a" == "run" ]; then RUN=1; fi
	if [ "$a" == "upd" ] && [ $GITOK -eq 1 ]; then GITUPD=1; fi
done

if [ $GITUPD -eq 1 ]; then
	if [ $PLUGIN_BUILD -eq 1 ]; then
		pushd "../cs-$PLUGIN_NAME"
		if ! git fetch origin; then
			echo "!!! Failed to fetch $PLUGIN_NAME repo"
			exit 1
		fi
		BRANCH=$(git rev-parse --abbrev-ref HEAD)
		if [ -f "$PLUGINS_DIR/$OUTBIN" ] && [ "$CSBUILD_NOUPDATE" != "ignore" ]; then
			if [ $(git rev-list HEAD..origin/$BRANCH --count) -eq 0 ]; then
				echo "Nothing updated"
				COMPILE=0
			fi
		fi
		if ! git merge --ff-only; then
			echo "!!! Failed to update $PLUGIN_NAME"
			popd
			exit 1
		fi
		popd
	else
		if ! git fetch origin; then
			echo "!!! Failed to fetch main repo"
			exit 1
		fi

		BUILDALERTED=0
		BRANCH=$(git rev-parse --abbrev-ref HEAD)
		if [ -f "$SERVER_OUTROOT/$OUTBIN" ] && [ "$CSBUILD_NOUPDATE" != "ignore" ]; then
			if [ $(git rev-list HEAD..origin/$BRANCH --count) -eq 0 ]; then
				echo "Nothing updated"
				COMPILE=0
			fi

			for file in $(git diff --stat --name-only HEAD origin/$BRANCH); do
				if [ "$file" = "build" ]; then
					BUILDALERTED=1
					break
				fi
			done
		fi
		if ! git merge --ff-only; then
			echo "!!! Failed to update server core"
			exit 1
		elif [ $BUILDALERTED -eq 1 ]; then
			echo "Bash script has been updated, restarting..."
			CSBUILD_NOUPDATE=ignore exec $0 $@
		fi
	fi
fi

OUTDIR="$ROOT/out/$MACH"

if [ $COMPILE -eq 1 ]; then
	if [ $DEBUG -eq 1 ]; then
		CFLAGS="$CFLAGS -g -DCORE_BUILD_DEBUG"
		CFLAGS="$CFLAGS -fno-omit-frame-pointer"
		OPT="-O0"
	fi

	if [ $GITOK -eq 1 ]; then
		VER="$(git -C "$ROOT" describe --tags HEAD 2> /dev/null)"
		if [ "$VER" == "" ]; then
			VER="$(git -C "$ROOT" rev-parse --short HEAD 2> /dev/null)"
		fi
		CFLAGS="$CFLAGS -DGIT_COMMIT_TAG=\"$VER\""
	fi

	STDERR="$ROOT/out/stderr"
	OBJDIR="$ROOT/out/.objs/$MACH"

	if [ $SAN -eq 1 ]; then
		LIBS="-lasan -lubsan $LIBS"
		CFLAGS="-fsanitize=undefined,address -fstack-protector-all -fno-sanitize=alignment -fno-sanitize-recover=all $CFLAGS"
	fi

	if [ ! -d "$OUTDIR" ]; then mkdir -p $OUTDIR; fi
	if [ ! -d "$OBJDIR" ]; then mkdir -p $OBJDIR; fi

	if [ -f "$ROOT/vars.sh" ]; then
		. "$ROOT/vars.sh"
	fi

	echo -n "Compiling..."
	pids=()
	OBJS=""

	> $STDERR
	for cpath in $(find "$ROOT/src/" -maxdepth 1 -type f -name "*.c"); do
		objpath="$OBJDIR/$(basename $cpath .c).o"
		OBJS="$OBJS $objpath"
		$CC -c $CFLAGS $WARN $OPT -I$ROOT/src $cpath -o$objpath 2>> $STDERR &
		pids+=($!)
		while test $(jobs -p | wc -w) -ge "$MAXWORKERS"; do
			wait ${pids[0]}
			pids=("${pids[@]:1}")
		done
	done

	for pid in ${pids[@]}; do
		waitfor $pid
	done

	echo -ne "done\nLinking..."
	if [ $PLUGIN_BUILD -eq 0 ]; then
		if [ "$TARGET_OS" == "win" ]; then
			LIBS="$LIBS -lkernel32 -ldbghelp -lws2_32"
			LIBS="$LIBS -Wl,--out-implib,$OUTDIR/lib$OUTBIN.a"
		else
			LIBS="$LIBS -lpthread -ldl"
		fi
	else
		if [ "$TARGET_OS" == "win" ]; then
			LIBS="$LIBS -L$SERVER_OUTROOT -lserver"
		fi
	fi

	$LNK$OBJS -o$OUTDIR/$OUTBIN $LIBS 2>> $STDERR &
	waitfor $!

	if [ $DEBUG -eq 0 ]; then
		echo -ne "done\nStripping..."
		"$MACH-strip" $OUTDIR/$OUTBIN
	fi

	echo -ne "done\n"
fi

if [ $PLUGIN_INSTALL -eq 1 ]; then
	echo -ne "Copying to the plugins directory..."
	if [ ! -d "$PLUGINS_DIR" ]; then mkdir -p $PLUGINS_DIR; fi
	cp $OUTDIR/$OUTBIN $PLUGINS_DIR/$OUTBIN
	echo "done"
fi

if [ $COMPILE -eq 1 ]; then
	stderrlen=$(wc -c < "$STDERR")
	if [ $stderrlen -gt 0 ]; then
		echo -e "Compiler stderr:\n$(cat $STDERR)"
		if grep $STDERR -qe 'error:'; then
			exit 1
		fi
	fi
fi

if [ $RUN -eq 1 ]; then
	echo -ne "Running..."
	if [[ "$TARGET_OS" != "$HOST_OS" ]]; then
		echo "error, $HOST_OS does not support $TARGET_OS binaries"
		exit 1
	fi
	pushd $SERVER_OUTROOT
	if [ $SAN -eq 1 ]; then
		set -- /usr/lib/$MACH/libasan.$SHLIB_EXT* /lib/$MACH/libasan.$SHLIB_EXT*
		LD_PRELOAD=$1 ./server
	else
		./server
	fi
	popd
fi

exit 0
