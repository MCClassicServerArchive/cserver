#!/bin/bash
if [ "$CC" = "" ]; then
	CC="gcc"
fi

OS=""
case "$(uname -s)" in
	Linux)
		OS="linux"
		;;
	CYGWIN*|MINGW*|MSYS*|MINGW32*)
		OS="win"
		;;
	*)
		OS="unknown"
		;;
esac
MAXWORKERS=$(nproc)
GITOK=0
GITUPD=0
RUN=0
SAN=0
DEBUG=0
OPT="-O2"
WARN=""
ROOT="."
MACH=$($CC -dumpmachine)
if [ $MACH = "" ]; then
	MACH="unknown"
fi
CC="$CC -fdiagnostics-color=always"
LNK="$CC"
if [ "$OS" != "win" ]; then
	LNK="gcc -rdynamic"
fi
CFLAGS="-pipe -fPIC"
LIBS=""
OUTBIN="server"
if git --version >/dev/null 2>&1; then
	CFLAGS="$CFLAGS -DGIT_COMMIT_TAG=\"$(git describe --tags HEAD)\""
	GITOK=1
fi
PLUGIN_BUILD=0
PLUGIN_INSTALL=0
SERVER_OUTROOT="$ROOT/out/$MACH"
PLUGINS_DIR="$SERVER_OUTROOT/plugins"

notaplugin () {
	echo "Looks like the specified directory is not a plugin."
	exit 1;
}

waitfor () {
	wait $1
	if [ $? -ne 0 ]; then
		echo -ne "error\nCompiler errors:\n$(cat $STDERR)\n"
		exit 1
	fi
}

for a in "$@"
do
	if [ $PLUGIN_BUILD -eq 1 ]; then
		if [ -n "$PLUGIN_NAME" ]; then
			if [ "$a" == "install" ]; then
				PLUGIN_INSTALL=1
			else
				LIBS="$LIBS -l$a"
			fi
			continue
		else
			if [ ! -d "../cs-$a" ]; then notaplugin; fi
			if [ ! -d "../cs-$a/src" ]; then notaplugin; fi
			PLUGIN_NAME="$a"
			CFLAGS="$CFLAGS -DCORE_BUILD_PLUGIN -Isrc"
			LNK="$LNK -shared"
			OUTBIN="$a.so"
			ROOT="../cs-$a"
		fi
	fi

	if [ "$a" == "cls" ]; then clear; fi
	if [ "$a" == "pb" ]; then PLUGIN_BUILD=1; fi
	if [ "$a" == "wall" ]; then WARN="-Wall -Wextra"; fi
	if [ "$a" == "wx" ]; then CFLAGS="$CFLAGS -Werror"; fi
	if [ "$a" == "w0" ]; then WARN="-W0"; fi
	if [ "$a" == "dbg" ]; then DEBUG=1; CFLAGS="$CFLAGS -g"; OPT="-O0"; fi
	if [ "$a" == "od" ]; then OPT="-O0"; fi
	if [ "$a" == "san" ]; then SAN=1; fi
	if [ "$a" == "run" ]; then RUN=1; fi
	if [ "$a" == "upd" ] && [ $GITOK -eq 1 ]; then GITUPD=1; fi
done

if [ $GITUPD -eq 1 ]; then
	if [ $PLUGIN_BUILD -eq 1 ]; then
		pushd "../cs-$PLUGIN_NAME"
		git pull
		popd
	else
		git pull
	fi
fi

STDERR="$ROOT/out/stderr"
OUTDIR="$ROOT/out/$MACH"
OBJDIR="$OUTDIR/objs"

if [ $SAN -eq 1 ]; then
	LIBS="-lasan -lubsan $LIBS"
	CFLAGS="-fsanitize=undefined,address -fstack-protector-all $CFLAGS"
fi

if [ ! -d "$OUTDIR" ]; then mkdir -p $OUTDIR; fi
if [ ! -d "$OBJDIR" ]; then mkdir -p $OBJDIR; fi

echo -n "Compiling..."
pids=()
OBJS=""

> $STDERR
for cpath in `find "$ROOT/src/" -maxdepth 1 -type f -name "*.c"`; do
	objpath="$OBJDIR/$(basename $cpath .c).o"
	OBJS="$OBJS $objpath"
	$CC -c $CFLAGS $WARN $OPT -I$ROOT/src $cpath -o$objpath 2>> $STDERR &
	pids+=($!)
	while test $(jobs -p | wc -w) -ge "$MAXWORKERS"; do
		wait -n;
	done
done

for pid in ${pids[@]}; do
	waitfor $pid
done

echo -ne "done\nLinking..."
if [ $PLUGIN_BUILD -eq 0 ]; then
	if [ "$OS" == "win" ]; then
		LIBS="$LIBS -lkernel32 -ldbghelp -lws2_32"
	else
		LIBS="$LIBS -lpthread -ldl"
	fi
fi

$LNK$OBJS -o$OUTDIR/$OUTBIN $LIBS 2>> $STDERR &
waitfor $!

if [ $DEBUG -eq 0 ]; then
	echo -ne "done\nStripping..."
	strip $OUTDIR/$OUTBIN
fi

if [ $PLUGIN_INSTALL -eq 1 ]; then
	echo -ne "done\nCopying to plugins directory..."
	if [ ! -d "$PLUGINS_DIR" ]; then mkdir $PLUGINS_DIR; fi
	cp $OUTDIR/$OUTBIN $PLUGINS_DIR/$OUTBIN
	echo "done"
else
	echo "done"
fi

stderrlen=$(wc -c < "$STDERR")
if [ $stderrlen -gt 0 ]; then
	echo -e "Compiler stderr:\n$(cat $STDERR)"
	exit 1
fi

if [ $RUN -eq 1 ]; then
	pushd $SERVER_OUTROOT
	./server
	popd
fi

exit 0
