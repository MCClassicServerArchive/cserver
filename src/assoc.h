#ifndef ASSOC_H
#define ASSOC_H
#include <core.h>

/**
 * @brief Перечисление возможных объектов для создания ассоцииации
 * 
 */
typedef enum _EAssocBindType {
	ASSOC_BIND_WORLD, /** Тип используется для ассоциации с мирами */
	ASSOC_BIND_CLIENT /** Тип используется для ассоциации с игроками */
} EAssocBindType;

/**
 * @brief Уникальный номер ассоциативного типа
 * 
 */
typedef cs_int16 AssocType;

/**
 * @brief Создаёт новый ассоциативный тип.
 * 
 * @param bindto вид объектов, к которым будет цепляться данный тип
 * @return уникальный номер созданного ассоциативного типа, либо -1
 * в случае, если создано максимально допустимое количество
 * ассоциативных типов.
 */
API AssocType Assoc_NewType(EAssocBindType bindto);

/**
 * @brief Удаляет созданный ранее ассоциативный тип.
 * После удаления типа ВСЕ связанные с ним участки памяти
 * будут также удалены. Убедитесь, что эта память нигде не
 * используется.
 * 
 * @param type номер типа, полученный из вызова Assoc_NewType()
 * @return true - тип был удалён успешно, false - произошла ошибка
 */
API cs_bool Assoc_DelType(AssocType type);

/**
 * @brief Выделение участка памяти для указанного объекта.
 * 
 * Если target не будет принадлежать к объектам, для которых был
 * создан ассоциативный тип, то вызов этой функция может привести
 * к падению сервера.
 * 
 * @param target указатель на объект, к которому будет привязана выделенная память
 * @param type ассоциативный тип
 * @param num количество выделяемых блоков
 * @param size размер выделяемого блока (в байтах)
 * @return указатель на выделенную память
 */
API void *Assoc_AllocFor(void *target, AssocType type, cs_size num, cs_size size);

/**
 * @brief Ищет выделенную ранее память для указанного объекта.
 * 
 * @param target указатель на объект, к которому была привязана искомая память
 * @param type ассоциативный тип
 * @return указатель на выделенную память, либо NULL, если она не выделялась
 */
API void *Assoc_GetPtr(void *target, AssocType type);

/**
 * @brief Высвобождает выделенную ранее память для указанного объекта.
 * 
 * @param target указатель на объект, к которому была привязана искомая память
 * @param type ассоциативный тип
 * @return true - память высвобождена, false - в объекте не
 * найдена память указанного ассоциативного типа
 */
API cs_bool Assoc_Remove(void *target, AssocType type);
#endif
